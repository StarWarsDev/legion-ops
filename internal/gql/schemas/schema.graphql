schema {
    query: Query
    mutation: Mutation
}

interface Record {
    id: ID!
    createdAt: Date!
    updatedAt: Date!
}

# EventType helps to indicate an event's type.
enum EventType {
    # Indicates a League event
    LEAGUE
    # Indicates an FFG Organized Play event
    FFGOP
    # Indicates some other, free form event
    OTHER
}

type Event implements Record {
    id: ID!
    createdAt: Date!
    updatedAt: Date!
    name: String!
    type: EventType!
    days: [EventDay!]!
    organizer: User!
    headJudge: User
    judges: [User!]!
    players: [User!]!
}

type EventDay implements Record{
    createdAt: Date!
    endAt: Date!
    id: ID!
    updatedAt: Date!
    rounds: [Round!]!
    startAt: Date!
}

type Match {
    id: ID!
    player1: User!
    player1VictoryPoints: Int!
    player1MarginOfVictory: Int!
    player2: User!
    player2VictoryPoints: Int!
    player2MarginOfVictory: Int!
    bye: User
    blue: User
    winner: User
}

type Mutation {
    createEvent(input: EventInput!): Event!
    updateEvent(input: EventInput!): Event!
    deleteEvent(eventId: ID!): Boolean!
}

type Query {
    events(user: ID, max: Int=10): [Event!]!
}

type Round {
    counter: Int!
    id: ID!
    matches: [Match!]!
}

type User {
    id: ID!
    name: String!
    picture: String
    username: String!
}

input EventInput {
    name: String!
}


scalar Date