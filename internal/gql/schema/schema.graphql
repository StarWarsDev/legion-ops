# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface Record {
    createdAt: Date!
    id: ID!
    updatedAt: Date!
}

type Event implements Record {
    createdAt: Date!
    days: [EventDay!]!
    headJudge: User
    id: ID!
    judges: [User!]!
    name: String!
    organizer: User!
    players: [User!]!
    type: EventType!
    updatedAt: Date!
}

type EventDay implements Record {
    createdAt: Date!
    endAt: Date!
    id: ID!
    rounds: [Round!]!
    startAt: Date!
    updatedAt: Date!
}

type Match {
    blue: User
    bye: User
    id: ID!
    player1: User!
    player1MarginOfVictory: Int!
    player1VictoryPoints: Int!
    player2: User!
    player2MarginOfVictory: Int!
    player2VictoryPoints: Int!
    winner: User
}

type Mutation {
    createEvent(input: EventInput!): Event!
    deleteEvent(eventId: ID!): Boolean!
    updateEvent(input: EventInput!): Event!
}

type Query {
    events(max: Int = 10, user: ID): [Event!]!
}

type Round {
    counter: Int!
    id: ID!
    matches: [Match!]!
}

type User {
    id: ID!
    name: String!
    picture: String
    username: String!
}

enum EventType {
    FFGOP
    LEAGUE
    OTHER
}

input EventDayInput {
    endAt: Date!
    rounds: [RoundInput!]
    startAt: Date!
}

input EventInput {
    days: [EventDayInput!]
    headJudge: ID
    judges: [ID!]
    name: String!
    organizer: ID!
    players: [ID!]
    type: EventType!
}

input MatchInput {
    blue: ID
    bye: ID
    player1: ID!
    player1MarginOfVictory: Int
    player1VictoryPoints: Int
    player2: ID!
    player2MarginOfVictory: Int
    player2VictoryPoints: Int
    winner: ID
}

input RoundInput {
    matches: [MatchInput!]
}


scalar Date